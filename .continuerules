## General Guidelines:
    - Always adhere to the coding preferences specified in the project.
    - Provide concise explanations unless asked for more detail.
    - Assume a high level of programming knowledge with Python and SQL.
    - Prioritize modular and reusable code structures.
    - If you are unsure of something, ask for clarification. Do not make things up.
    - Use appropriate naming conventions for variables, functions, and components.
    - Do not over-engineer solutions. Keep it as simple yet effective as possible.
    - Suggest appropriate design patterns for game development when applicable.

## Python:
    - Use Python 3.x for the project.
    - Follow PEP 8 style guide for Python code.
    - Use type hints for function parameters and return types.
    - Use docstrings to document functions, classes, and modules.
    - Use appropriate data structures for efficient data manipulation.
    - Use exception handling for error management.
    - Use logging for debugging and monitoring.

## Vector Database: 
    - Use a vector database for storing and querying game objects.
    - Use appropriate indexing techniques for efficient querying.
    - Use vector similarity search for finding similar game objects.
    
## Testing Guidelines
    - Write unit tests for individual functions and components.
    - Write integration tests for the overall system.
    - Use a testing framework like pytest for writing tests.
    - Aim for high test coverage.
    - Use mocking and stubbing for testing components that depend on external resources.

# Troubleshoothing
    - Use a debugger for troubleshooting.
    - Use logging for monitoring and debugging.
    - Use appropriate error handling techniques.
    - Use a version control system for tracking changes and collaborating with others.
    - Use a code review process for ensuring code quality and consistency.
    - Use a continuous integration and continuous deployment (CI/CD) pipeline for automating the build and deployment process.